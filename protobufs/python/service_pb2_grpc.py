# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import service_pb2 as service__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrcaCoreStub(object):
    """OrcaCore is the central orchestration service that:
    - Manages the lifecycle of processing windows
    - Coordinates algorithm execution across distributed processors
    - Tracks DAG dependencies and execution state
    - Routes results between dependent algorithms
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterProcessor = channel.unary_stream(
                '/OrcaCore/RegisterProcessor',
                request_serializer=service__pb2.ProcessorRegistration.SerializeToString,
                response_deserializer=service__pb2.ProcessingTask.FromString,
                _registered_method=True)
        self.EmitWindow = channel.unary_unary(
                '/OrcaCore/EmitWindow',
                request_serializer=service__pb2.Window.SerializeToString,
                response_deserializer=service__pb2.WindowEmitStatus.FromString,
                _registered_method=True)
        self.RegisterWindowType = channel.unary_unary(
                '/OrcaCore/RegisterWindowType',
                request_serializer=service__pb2.WindowType.SerializeToString,
                response_deserializer=service__pb2.Status.FromString,
                _registered_method=True)
        self.RegisterAlgorithm = channel.unary_unary(
                '/OrcaCore/RegisterAlgorithm',
                request_serializer=service__pb2.Algorithm.SerializeToString,
                response_deserializer=service__pb2.Status.FromString,
                _registered_method=True)
        self.SubmitResult = channel.unary_unary(
                '/OrcaCore/SubmitResult',
                request_serializer=service__pb2.Result.SerializeToString,
                response_deserializer=service__pb2.Status.FromString,
                _registered_method=True)
        self.GetDagState = channel.unary_unary(
                '/OrcaCore/GetDagState',
                request_serializer=service__pb2.DagStateRequest.SerializeToString,
                response_deserializer=service__pb2.DagState.FromString,
                _registered_method=True)


class OrcaCoreServicer(object):
    """OrcaCore is the central orchestration service that:
    - Manages the lifecycle of processing windows
    - Coordinates algorithm execution across distributed processors
    - Tracks DAG dependencies and execution state
    - Routes results between dependent algorithms
    """

    def RegisterProcessor(self, request, context):
        """Register a processor node and its supported algorithms
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EmitWindow(self, request, context):
        """Submit a window for processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterWindowType(self, request, context):
        """Register a new window type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterAlgorithm(self, request, context):
        """Register a new algorithm type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitResult(self, request, context):
        """Submit results from algorithm execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDagState(self, request, context):
        """Get the current state of a DAG execution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrcaCoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterProcessor': grpc.unary_stream_rpc_method_handler(
                    servicer.RegisterProcessor,
                    request_deserializer=service__pb2.ProcessorRegistration.FromString,
                    response_serializer=service__pb2.ProcessingTask.SerializeToString,
            ),
            'EmitWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.EmitWindow,
                    request_deserializer=service__pb2.Window.FromString,
                    response_serializer=service__pb2.WindowEmitStatus.SerializeToString,
            ),
            'RegisterWindowType': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWindowType,
                    request_deserializer=service__pb2.WindowType.FromString,
                    response_serializer=service__pb2.Status.SerializeToString,
            ),
            'RegisterAlgorithm': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAlgorithm,
                    request_deserializer=service__pb2.Algorithm.FromString,
                    response_serializer=service__pb2.Status.SerializeToString,
            ),
            'SubmitResult': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitResult,
                    request_deserializer=service__pb2.Result.FromString,
                    response_serializer=service__pb2.Status.SerializeToString,
            ),
            'GetDagState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDagState,
                    request_deserializer=service__pb2.DagStateRequest.FromString,
                    response_serializer=service__pb2.DagState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OrcaCore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('OrcaCore', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrcaCore(object):
    """OrcaCore is the central orchestration service that:
    - Manages the lifecycle of processing windows
    - Coordinates algorithm execution across distributed processors
    - Tracks DAG dependencies and execution state
    - Routes results between dependent algorithms
    """

    @staticmethod
    def RegisterProcessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/OrcaCore/RegisterProcessor',
            service__pb2.ProcessorRegistration.SerializeToString,
            service__pb2.ProcessingTask.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EmitWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/EmitWindow',
            service__pb2.Window.SerializeToString,
            service__pb2.WindowEmitStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterWindowType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/RegisterWindowType',
            service__pb2.WindowType.SerializeToString,
            service__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterAlgorithm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/RegisterAlgorithm',
            service__pb2.Algorithm.SerializeToString,
            service__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/SubmitResult',
            service__pb2.Result.SerializeToString,
            service__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDagState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaCore/GetDagState',
            service__pb2.DagStateRequest.SerializeToString,
            service__pb2.DagState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OrcaProcessorStub(object):
    """OrcaProcessor defines the interface that each processing node must implement.
    Processors are language-specific services that:
    - Execute individual algorithms
    - Handle their own internal state
    - Report results back to the orchestrator
    Multiple processors can run simultaneously, supporting different languages/runtimes
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteAlgorithm = channel.unary_unary(
                '/OrcaProcessor/ExecuteAlgorithm',
                request_serializer=service__pb2.ExecutionRequest.SerializeToString,
                response_deserializer=service__pb2.ExecutionResult.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/OrcaProcessor/HealthCheck',
                request_serializer=service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class OrcaProcessorServicer(object):
    """OrcaProcessor defines the interface that each processing node must implement.
    Processors are language-specific services that:
    - Execute individual algorithms
    - Handle their own internal state
    - Report results back to the orchestrator
    Multiple processors can run simultaneously, supporting different languages/runtimes
    """

    def ExecuteAlgorithm(self, request, context):
        """Execute an algorithm with given inputs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Check health/status of processor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrcaProcessorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteAlgorithm': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteAlgorithm,
                    request_deserializer=service__pb2.ExecutionRequest.FromString,
                    response_serializer=service__pb2.ExecutionResult.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=service__pb2.HealthCheckRequest.FromString,
                    response_serializer=service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OrcaProcessor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('OrcaProcessor', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrcaProcessor(object):
    """OrcaProcessor defines the interface that each processing node must implement.
    Processors are language-specific services that:
    - Execute individual algorithms
    - Handle their own internal state
    - Report results back to the orchestrator
    Multiple processors can run simultaneously, supporting different languages/runtimes
    """

    @staticmethod
    def ExecuteAlgorithm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaProcessor/ExecuteAlgorithm',
            service__pb2.ExecutionRequest.SerializeToString,
            service__pb2.ExecutionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/OrcaProcessor/HealthCheck',
            service__pb2.HealthCheckRequest.SerializeToString,
            service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
