syntax="proto3";

option go_package = "github.com/predixus/orca/protobufs/go";

import "google/protobuf/struct.proto";
import "vendor/validate.proto";

// OrcaCore is the central orchestration service that:
// - Manages the lifecycle of processing windows
// - Coordinates algorithm execution across distributed processors
// - Tracks DAG dependencies and execution state
// - Routes results between dependent algorithms
service OrcaCore {
  // Register a processor node and its supported algorithms
  rpc RegisterProcessor(ProcessorRegistration) returns (Status);

  // Register a new window type
  rpc RegisterWindowType(WindowType) returns (WindowTypeRegisterStatus);

  // Submit a window for processing
  rpc EmitWindow(Window) returns (WindowEmitStatus);

  // Register a new algorithm type
  rpc RegisterAlgorithm(Algorithm) returns (Status);

  // Submit results from algorithm execution
  rpc SubmitResult(Result) returns (Status);

  // Get the current state of a DAG execution
  rpc GetDagState(DagStateRequest) returns (DagState);
}

// OrcaProcessor defines the interface that each processing node must implement.
// Processors are language-agnostic services that:
// - Execute individual algorithms
// - Handle their own internal state
// - Report results back to the orchestrator
// Orca will schedule processors asynchronously as per the DAG
service OrcaProcessor {
  // Execute an algorithm with given inputs
  rpc ExecuteDAG(ExecutionRequest) returns (ExecutionResult);

  // Check health/status of processor
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Window represents a time-bounded processing context that triggers algorithm execution. Windows are the primary input that start DAG processing flows.
message Window {
  // Time that the window starts - nanoseconds since epoch
  // Required: Must be > 0 and < to
  uint64 from = 1 [(buf.validate.field) = {
    required: true,
    uint64: {
      gt: 0
    }
  }];

  // Time that the window ends - nanoseconds since epoch
  // Required: Must be > from
  uint64 to = 2 [(buf.validate.field).required = true];
  
  // The canonical name of the window that uniquely identifies it
  // This allows tracking of window state and results across the system
  // Required: Must be unique within the system, and refer directly to
  // window type
  string window_type_name = 3 [(buf.validate.field).required = true];

  // The version of the window type, as defined by WindoType
  string window_type_version = 4 [(buf.validate.field).required = true];

  // A unique identifier that defines where the window came from
  string origin = 5 [(buf.validate.field).required = true];

  option (buf.validate.message).cel = {
      id: "window.to",
      message: "`to` must be greater than or equal to `from`",
      expression: "this.to >= this.from",
    };

}

// WindowType defines a category of window that can trigger algorithms.
// Algorithms subscribe to window types to indicate when they should be executed.
message WindowType {
  // Name of the window type - must be globally unique
  // Examples: "daily", "hourly", "market_close", "event_triggered"
  string name = 1 [(buf.validate.field).required = true];

  // Version of the algorithm. Follows basic semver and allows window
  // types to be changed over time, with traceability
  string version = 2 [(buf.validate.field).required=true];
}

//  WindowTypeRegisterStatus status of the window type registration process
message WindowTypeRegisterStatus {
  
  // status enum to handle the window registration status
  enum StatusEnum {
    // the window was not registered
    WINDOW_NOT_REGISTERED = 0;
    // the window was registered successfully
    WINDOW_REGISTERED = 1;
    // the window type already exists
    WINDOW_TYPE_ALREADY_EXISTS = 2;
  }

  // the status of the window registration
  StatusEnum status = 1 [(buf.validate.field).required = true];

  // a message if application (e.g. in the case of an error)
  string message = 2;
}

message WindowEmitStatus {

  // A status enum that captures scenarios regarding a window being emmited
  enum StatusEnum {
    // When no algorithms could be found that are triggered by this window
    NO_TRIGGERED_ALGORITHMS = 0;

    // When processing has successfully been triggered
    PROCESSING_TRIGGERED = 1;
  }
  StatusEnum status = 1 [(buf.validate.field).required = true];
}

// AlgorithmDependency defines a requirement that one algorithm has on another's results.
// These dependencies form the edges in the processing DAG.
message AlgorithmDependency {
  // Name of the required algorithm
  // Must reference an existing algorithm name in the system
  string name = 1 [(buf.validate.field).required = true];

  // Version of the required algorithm
  // Must follow semantic versioning (e.g., "1.0.0")
  string version = 2 [(buf.validate.field).required = true];

  // Name of the processor that the algorithm is associated with
  string processor_name = 3 [(buf.validate.field).required = true];

  // Runtime of the processor that the algorithm is associated with
  string processor_runtime = 4 [(buf.validate.field).required = true];
}

// Algorithm defines a processing unit that can be executed by processors.
// Algorithms form the nodes in the processing DAG and are triggered by specific window types.
message Algorithm {
  // Name of the algorithm - must be globally unique
  // This identifies the algorithm across the system
  string name = 1 [(buf.validate.field).required = true];

  // Version of the algorithm - must follow semantic versioning
  // Allows for algorithm evolution while maintaining compatibility
  string version = 2 [(buf.validate.field).required = true];

  // Type of window that triggers this algorithm
  // References a WindowType that will cause this algorithm to execute
  WindowType window_type = 3 [(buf.validate.field).required = true];

  // Other algorithms that this algorithm depends on
  // The algorithm won't execute until all dependencies have completed
  // Dependencies must not form cycles - this is statically checked on processor registration
  repeated AlgorithmDependency dependencies = 4;
}

// ResultStatus indicates the outcome of algorithm execution
enum ResultStatus {
  // Algorithm failed but the error was handled gracefully
  // The system may retry or skip depending on configuration
  RESULT_STATUS_HANDLED_FAILED = 0;

  // Algorithm failed with an unexpected error
  // Requires investigation and may halt dependent processing
  RESULT_STATUS_UNHANDLED_FAILED = 1;

  // Algorithm completed successfully
  // Results are valid and can be used by dependent algorithms
  RESULT_STATUS_SUCEEDED = 2;
}

// Container for array of float values
message FloatArray {
  repeated float values = 1;
}

// Result of an algorithm execution
message Result {
  // Name of the algorithm that produced the result
  string algorithm_name = 1 [(buf.validate.field).required = true];

  // Version of the algorithm that produced the result
  string version = 2 [(buf.validate.field).required = true];

  // Status of the result execution
  ResultStatus status = 3 [(buf.validate.field).required = true];

  // The actual result data - can be either an array of floats or a structured object
  oneof result_data {
    // for single number results
    float single_value = 4;

    // For numeric array results
    FloatArray float_values = 5;
    
    // For structured data results (JSON-like)
    // Must follow a map<string, value> schema where value corresponds to https://protobuf.dev/reference/protobuf/google.protobuf/#value
    google.protobuf.Struct struct_value = 6;
  }

  // Timestamp when the result was produced
  int64 timestamp = 7 [(buf.validate.field).required = true];
}


// ProcessorRegistration is sent by processors when they start up to announce their capabilities
// to the orchestrator. This establishes a long-lived connection for receiving tasks.
message ProcessorRegistration {
  // Unique name of the runtime
  string name = 1 [(buf.validate.field).required = true];

  // Language/runtime of the processor
  // Examples: "python3.9", "go1.19", "R4.1"
  string runtime = 2 [(buf.validate.field).required = true];

  // Algorithms this processor can execute
  // The processor must implement all listed algorithms
  repeated Algorithm supported_algorithms = 3 [(buf.validate.field).required = true];
}

// ProcessingTask represents a single algorithm execution request sent to a processor.
// Tasks are streamed to processors as their dependencies are satisfied.
message ProcessingTask {
  // Unique ID for this specific task execution
  // Used to correlate results and track execution state
  string task_id = 1 [(buf.validate.field).required = true];

  // Algorithm to execute
  // Must be one of the algorithms the processor registered support for
  Algorithm algorithm = 2 [(buf.validate.field).required = true];

  // Window that triggered this task
  // Provides the time context for the algorithm execution
  Window window = 3 [(buf.validate.field).required = true];

  // Results from dependent algorithms
  // Contains all results that this algorithm declared dependencies on
  // All dependencies will be present when task is sent
  repeated Result dependency_results = 4;
}

// ExecuteDAG contains all information needed for a processor to execute
// a specific algorithm instance. Sent by the orchestrator to processors.
message ExecuteDAG {
  // Task ID from the original ProcessingTask
  // Used to correlate results back to the task
  string task_id = 1 [(buf.validate.field).required = true];

  // Algorithm to execute with its full specification
  Algorithm algorithm = 2 [(buf.validate.field).required = true];
  

  // Input data/parameters for the algorithm
  // Keys are parameter names, values are serialised data
  // Format of data is specific to the algorithm implementation
  map<string, bytes> inputs = 3;
}

message ExecutionResult {
  // Task ID
  string task_id = 1 [(buf.validate.field).required = true];
  // Execution status
  ResultStatus status = 2 [(buf.validate.field).required = true];
  // Output data
  map<string, bytes> outputs = 3 [(buf.validate.field).required = true];
}

message DagStateRequest {
  // Window ID to query
  string window_id = 1 [(buf.validate.field).required = true];
}

// ExecutionRequest provides a complete view of a processing DAG's execution
// status for a specific window. Used for monitoring and debugging.
message ExecutionRequest {
  // The window that triggered the DAG 
  Window window = 1 [(buf.validate.field).required = true];
  
  // Results from dependant algorithms
  repeated AlgorithmResult algorithm_results = 2;

  // The execution DAG
}

// AlgorithmWindowResult Packaged algorithm and result to a window
message AlgorithmResult {
  Algorithm algorithm = 1 [(buf.validate.field).required=true];
  Result result = 2 [(buf.validate.field).required=true];
}

message Status {
  bool received = 1;
  string message = 2;
}

// HealthCheckRequest is sent to processors to verify they are functioning
message HealthCheckRequest {
  // Timestamp of the request in unix epoch milliseconds
  // Used to measure response latency
  int64 timestamp = 1 [(buf.validate.field).required = true];
}

// HealthCheckResponse indicates the health status of a processor
message HealthCheckResponse {
  // Overall health status of the processor
  enum Status {
    // Unknown status - should never be used
    STATUS_UNKNOWN = 0;
    // Processor is healthy and ready to accept tasks
    STATUS_SERVING = 1;
    // Processor is starting up or shutting down
    STATUS_TRANSITIONING = 2;
    // Processor is not healthy and cannot accept tasks
    STATUS_NOT_SERVING = 3;
  }
  
  // Current health status
  Status status = 1 [(buf.validate.field).required = true];

  // Optional message providing more detail about the health status
  string message = 2;

  // System metrics about the processor
  ProcessorMetrics metrics = 3;
}

// ProcessorMetrics provides runtime information about a processor
message ProcessorMetrics {
  // Number of algorithms currently being executed
  int32 active_tasks = 1;

  // Memory usage in bytes
  int64 memory_bytes = 2;

  // CPU usage percentage (0-100)
  float cpu_percent = 3;

  // Time since processor started in seconds
  int64 uptime_seconds = 4;
}
