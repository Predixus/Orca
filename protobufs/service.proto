syntax="proto3";

option go_package = "github.com/predixus/orca/protobufs/go";

// Services for the core orchestrator
service OrcaCore {
  // Will log a window ready for processing and emit to relevant
  // algorithms their processor RPC
  rpc EmitWindow(Window) returns (Status);

  // Will register that a window type has been created
  rpc RegisterWindowType(WindowType) returns (Status);

  // Will register that an algorithm has been created by a processor  
  rpc RegisterAlgorithm(AlgorithmType) returns (Status);

  // Will register the result from an algorithm
  rpc RegisterResult(Result) returns (Status);
}

// Services for the processor node
service OrcaProcessor {
  // Will start a processing request from a processor
  rpc Process(ProcessingRequest) returns (status);
}

message Window {
  // Time that the window starts - nanoseconds since epoch
  uint64 from = 1;

  // Time that the window ends - nanoseconds since epoch
  uint64 to = 2;
  
  // The canonical name of the window. This uniquely identifiers the window
  string name = 3;
}

message WindowType {
  // Name of the window - globally unique
  string name = 1;
}

message AlgorithmDependency {

  // Name of the algorithm that this depends on
  string name = 1;

  // Version of the algorithm that this depends on
  string version = 2;
}

message Algorithm {
  // Name of the algorithm - globally unique
  string name = 1;

  // Version of the algorithm - must follow semver
  string version = 2;

  // Type of window that triggers this algorithm
  string window_type_name = 3;

  // Other algorithms that this algorithm depends on
  repeated AlgorithmDependency dependencies = 4;
}

enum ResultStatus {
  RESULT_STATUS_HANDLED_FAILED = 0;
  RESULT_STATUS_UNHANDLED_FAILED = 1;
  RESULT_STATUS_SUCEEDED = 2;
}

// Result of an algorithm
message Result {
  // Name of the algorithm that produced the result
  string algorithm_name = 1;

  // Version of the algorithm that produced the result
  string version = 2;
  
  // Status of the result
  ResultStatus status = 3;
}

message Status {
  //  Generic recieved flag
  bool recieved = 1;
}
