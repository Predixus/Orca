// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrcaService_RegisterWindow_FullMethodName        = "/OrcaService/RegisterWindow"
	OrcaService_RegisterWindowType_FullMethodName    = "/OrcaService/RegisterWindowType"
	OrcaService_RegisterAlgorithmType_FullMethodName = "/OrcaService/RegisterAlgorithmType"
)

// OrcaServiceClient is the client API for OrcaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrcaServiceClient interface {
	RegisterWindow(ctx context.Context, in *Window, opts ...grpc.CallOption) (*Status, error)
	RegisterWindowType(ctx context.Context, in *WindowType, opts ...grpc.CallOption) (*Status, error)
	RegisterAlgorithmType(ctx context.Context, in *AlgorithmType, opts ...grpc.CallOption) (*Status, error)
}

type orcaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrcaServiceClient(cc grpc.ClientConnInterface) OrcaServiceClient {
	return &orcaServiceClient{cc}
}

func (c *orcaServiceClient) RegisterWindow(ctx context.Context, in *Window, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, OrcaService_RegisterWindow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaServiceClient) RegisterWindowType(ctx context.Context, in *WindowType, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, OrcaService_RegisterWindowType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaServiceClient) RegisterAlgorithmType(ctx context.Context, in *AlgorithmType, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, OrcaService_RegisterAlgorithmType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrcaServiceServer is the server API for OrcaService service.
// All implementations must embed UnimplementedOrcaServiceServer
// for forward compatibility.
type OrcaServiceServer interface {
	RegisterWindow(context.Context, *Window) (*Status, error)
	RegisterWindowType(context.Context, *WindowType) (*Status, error)
	RegisterAlgorithmType(context.Context, *AlgorithmType) (*Status, error)
	mustEmbedUnimplementedOrcaServiceServer()
}

// UnimplementedOrcaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrcaServiceServer struct{}

func (UnimplementedOrcaServiceServer) RegisterWindow(context.Context, *Window) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWindow not implemented")
}
func (UnimplementedOrcaServiceServer) RegisterWindowType(context.Context, *WindowType) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWindowType not implemented")
}
func (UnimplementedOrcaServiceServer) RegisterAlgorithmType(context.Context, *AlgorithmType) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAlgorithmType not implemented")
}
func (UnimplementedOrcaServiceServer) mustEmbedUnimplementedOrcaServiceServer() {}
func (UnimplementedOrcaServiceServer) testEmbeddedByValue()                     {}

// UnsafeOrcaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrcaServiceServer will
// result in compilation errors.
type UnsafeOrcaServiceServer interface {
	mustEmbedUnimplementedOrcaServiceServer()
}

func RegisterOrcaServiceServer(s grpc.ServiceRegistrar, srv OrcaServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrcaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrcaService_ServiceDesc, srv)
}

func _OrcaService_RegisterWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Window)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServiceServer).RegisterWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrcaService_RegisterWindow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServiceServer).RegisterWindow(ctx, req.(*Window))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrcaService_RegisterWindowType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServiceServer).RegisterWindowType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrcaService_RegisterWindowType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServiceServer).RegisterWindowType(ctx, req.(*WindowType))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrcaService_RegisterAlgorithmType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlgorithmType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaServiceServer).RegisterAlgorithmType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrcaService_RegisterAlgorithmType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaServiceServer).RegisterAlgorithmType(ctx, req.(*AlgorithmType))
	}
	return interceptor(ctx, in, info, handler)
}

// OrcaService_ServiceDesc is the grpc.ServiceDesc for OrcaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrcaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrcaService",
	HandlerType: (*OrcaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWindow",
			Handler:    _OrcaService_RegisterWindow_Handler,
		},
		{
			MethodName: "RegisterWindowType",
			Handler:    _OrcaService_RegisterWindowType_Handler,
		},
		{
			MethodName: "RegisterAlgorithmType",
			Handler:    _OrcaService_RegisterAlgorithmType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
