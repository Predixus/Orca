// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.26.0
// source: interface.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WindowServiceClient is the client API for WindowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WindowServiceClient interface {
	// Unary Requests - i.e. no open connection whilst processes happen.
	RegisterWindow(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*WindowResponse, error)
	DeleteWindow(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*WindowResponse, error)
	ReprocessWindow(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*WindowResponse, error)
	ModifyWindow(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*WindowResponse, error)
}

type windowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWindowServiceClient(cc grpc.ClientConnInterface) WindowServiceClient {
	return &windowServiceClient{cc}
}

func (c *windowServiceClient) RegisterWindow(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*WindowResponse, error) {
	out := new(WindowResponse)
	err := c.cc.Invoke(ctx, "/WindowService/RegisterWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *windowServiceClient) DeleteWindow(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*WindowResponse, error) {
	out := new(WindowResponse)
	err := c.cc.Invoke(ctx, "/WindowService/DeleteWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *windowServiceClient) ReprocessWindow(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*WindowResponse, error) {
	out := new(WindowResponse)
	err := c.cc.Invoke(ctx, "/WindowService/ReprocessWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *windowServiceClient) ModifyWindow(ctx context.Context, in *WindowRequest, opts ...grpc.CallOption) (*WindowResponse, error) {
	out := new(WindowResponse)
	err := c.cc.Invoke(ctx, "/WindowService/ModifyWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WindowServiceServer is the server API for WindowService service.
// All implementations must embed UnimplementedWindowServiceServer
// for forward compatibility
type WindowServiceServer interface {
	// Unary Requests - i.e. no open connection whilst processes happen.
	RegisterWindow(context.Context, *WindowRequest) (*WindowResponse, error)
	DeleteWindow(context.Context, *WindowRequest) (*WindowResponse, error)
	ReprocessWindow(context.Context, *WindowRequest) (*WindowResponse, error)
	ModifyWindow(context.Context, *WindowRequest) (*WindowResponse, error)
	mustEmbedUnimplementedWindowServiceServer()
}

// UnimplementedWindowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWindowServiceServer struct {
}

func (UnimplementedWindowServiceServer) RegisterWindow(context.Context, *WindowRequest) (*WindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWindow not implemented")
}
func (UnimplementedWindowServiceServer) DeleteWindow(context.Context, *WindowRequest) (*WindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWindow not implemented")
}
func (UnimplementedWindowServiceServer) ReprocessWindow(context.Context, *WindowRequest) (*WindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReprocessWindow not implemented")
}
func (UnimplementedWindowServiceServer) ModifyWindow(context.Context, *WindowRequest) (*WindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyWindow not implemented")
}
func (UnimplementedWindowServiceServer) mustEmbedUnimplementedWindowServiceServer() {}

// UnsafeWindowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WindowServiceServer will
// result in compilation errors.
type UnsafeWindowServiceServer interface {
	mustEmbedUnimplementedWindowServiceServer()
}

func RegisterWindowServiceServer(s grpc.ServiceRegistrar, srv WindowServiceServer) {
	s.RegisterService(&WindowService_ServiceDesc, srv)
}

func _WindowService_RegisterWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WindowServiceServer).RegisterWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WindowService/RegisterWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WindowServiceServer).RegisterWindow(ctx, req.(*WindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WindowService_DeleteWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WindowServiceServer).DeleteWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WindowService/DeleteWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WindowServiceServer).DeleteWindow(ctx, req.(*WindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WindowService_ReprocessWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WindowServiceServer).ReprocessWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WindowService/ReprocessWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WindowServiceServer).ReprocessWindow(ctx, req.(*WindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WindowService_ModifyWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WindowServiceServer).ModifyWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WindowService/ModifyWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WindowServiceServer).ModifyWindow(ctx, req.(*WindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WindowService_ServiceDesc is the grpc.ServiceDesc for WindowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WindowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WindowService",
	HandlerType: (*WindowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWindow",
			Handler:    _WindowService_RegisterWindow_Handler,
		},
		{
			MethodName: "DeleteWindow",
			Handler:    _WindowService_DeleteWindow_Handler,
		},
		{
			MethodName: "ReprocessWindow",
			Handler:    _WindowService_ReprocessWindow_Handler,
		},
		{
			MethodName: "ModifyWindow",
			Handler:    _WindowService_ModifyWindow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interface.proto",
}
