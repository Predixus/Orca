syntax="proto3";

option go_package = "github.com/predixus/pdb_framework/protobufs/go";

service  WindowService {
  // Unary Requests - i.e. no open connection whilst processes happen.
  rpc RegisterWindow(WindowRequest) returns (WindowResponse);
  rpc DeleteWindow(WindowRequest) returns (WindowResponse);
  rpc ReprocessWindow(WindowRequest) returns (WindowResponse);
  rpc ModifyWindow(WindowRequest) returns (WindowResponse);
};

message WindowRequest {
  Window window = 1;
}

message WindowResponse {
  int32 status = 1;
}

// Defines an arbitrary location, for where an Window was generated.
message Origin {
    // The location name. Best practice is use Snake,
    // Pascal or Camel case consistently.
    string name = 1; 
}

// A generic versioning struct.
message Version {
    int32 minor = 1;
    int32 major = 2;
    int32 patch = 3;
}

// Defines the type associated with a window. Can be freeform but
// must be used consistently across identical window types.
message Type {
    // Name of the type. 
    string name = 1; 
    // The version of the window type.
    Version version = 2; 
}

// Arbitrary information that can be carried along with the window.
// It is often useful, when performing batch analysis, to include
// 'expensive' data that can be queried once, in this structure. This
// data can then be access by all algorithms that are triggered by
// this window.
message Payload {
    bytes data = 1; // The payload data.
}

// The window definition. The Window is the Cardinal trigger for all
// processing DAGs. It defines the complete set of information 
// required to successfully run an algorithm, pipeline and/or 
// complete DAG.
//
// It should contain the minimal set of information required for the
// algorithm to get the relevant data and complete processing.
message Window {

    // The start of the window, it the same units as the basis (e.g. Time).
    string start = 1;

    // The end time of the window, in the same units as the basis (e.g. Time).
    string end = 2; 

    // Where the window was generated. E.g. by an automated service or locally.
    Origin origin = 3; 

    // The type of the window. It is the Window Type that is the
    // fundamentally  distinguishing characteristic between Windows.
    // E.g.
    //     Window A may define a region of time where a certain
    //     event happened,
    //     and Window B may define a sub-region within Window A.
    //     
    //     Both of these windows will have a unique ``
    Type type = 4; 

    // The additional arbitrary information that can be taken along with
    // the Window.
    Payload payload = 5;
    
    // A globally unique hash identifying this epoch.
    string key = 6; 

    // If this window has been derived from an invoked algorithm
    // within the framework, then the `parent_key` is the
    // key of that Algorithm.
    string parent_key = 7;
}

// The definition of an algorithm.
message Algorithm {
    // The name of the algorithm. 
    string name = 1; 

    // The version of the algorithm. When versioning, the semver rules
    // should be used in the context of the algorithms result. If the result
    // is backwards compatible, then a minor change, etc.
    Version version = 2;

    // The Window type that triggers the algorithm. Many different window types,
    // can trigger one algorithm.
    repeated Type window_type = 3;
}
