// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package postgresql

import (
	"context"
)

const addProcessor = `-- name: AddProcessor :one
INSERT INTO processors (
  name,
  runtime,
  active
) VALUES (
  $1,
  $2,
  true
) ON CONFLICT (name) DO UPDATE 
SET 
  runtime = EXCLUDED.runtime,
  active = EXCLUDED.active
RETURNING name, runtime, active, created
`

type AddProcessorParams struct {
	Name    string
	Runtime string
}

func (q *Queries) AddProcessor(ctx context.Context, arg AddProcessorParams) (Processor, error) {
	row := q.db.QueryRow(ctx, addProcessor, arg.Name, arg.Runtime)
	var i Processor
	err := row.Scan(
		&i.Name,
		&i.Runtime,
		&i.Active,
		&i.Created,
	)
	return i, err
}

const registerWindow = `-- name: RegisterWindow :one
INSERT INTO windows (
  window_name, 
  time_from, 
  time_to,
  origin
) VALUES (
  $1,
  $2,
  $3,
  $4
) RETURNING id, window_name, time_from, time_to, origin, created
`

type RegisterWindowParams struct {
	WindowName string
	TimeFrom   int64
	TimeTo     int64
	Origin     string
}

func (q *Queries) RegisterWindow(ctx context.Context, arg RegisterWindowParams) (Window, error) {
	row := q.db.QueryRow(ctx, registerWindow,
		arg.WindowName,
		arg.TimeFrom,
		arg.TimeTo,
		arg.Origin,
	)
	var i Window
	err := row.Scan(
		&i.ID,
		&i.WindowName,
		&i.TimeFrom,
		&i.TimeTo,
		&i.Origin,
		&i.Created,
	)
	return i, err
}
