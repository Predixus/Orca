// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAlgorithmType = `-- name: CreateAlgorithmType :one
INSERT INTO algorithm_types (
    name,
    version,
    window_type,
    depends_on
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING name, version, window_type, depends_on, created_at
`

type CreateAlgorithmTypeParams struct {
	Name       string
	Version    string
	WindowType string
	DependsOn  pgtype.Text
}

func (q *Queries) CreateAlgorithmType(ctx context.Context, arg CreateAlgorithmTypeParams) (AlgorithmType, error) {
	row := q.db.QueryRow(ctx, createAlgorithmType,
		arg.Name,
		arg.Version,
		arg.WindowType,
		arg.DependsOn,
	)
	var i AlgorithmType
	err := row.Scan(
		&i.Name,
		&i.Version,
		&i.WindowType,
		&i.DependsOn,
		&i.CreatedAt,
	)
	return i, err
}

const createWindowType = `-- name: CreateWindowType :one
INSERT INTO window_types (
    name
) VALUES (
    $1
) ON CONFLICT (name) DO NOTHING
RETURNING name, created_at
`

func (q *Queries) CreateWindowType(ctx context.Context, name string) (WindowType, error) {
	row := q.db.QueryRow(ctx, createWindowType, name)
	var i WindowType
	err := row.Scan(&i.Name, &i.CreatedAt)
	return i, err
}
