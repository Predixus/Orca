// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package postgresql

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ResultType string

const (
	ResultTypeStruct ResultType = "struct"
	ResultTypeArray  ResultType = "array"
	ResultTypeValue  ResultType = "value"
	ResultTypeNone   ResultType = "none"
)

func (e *ResultType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ResultType(s)
	case string:
		*e = ResultType(s)
	default:
		return fmt.Errorf("unsupported scan type for ResultType: %T", src)
	}
	return nil
}

type NullResultType struct {
	ResultType ResultType
	Valid      bool // Valid is true if ResultType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullResultType) Scan(value interface{}) error {
	if value == nil {
		ns.ResultType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ResultType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullResultType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ResultType), nil
}

type Algorithm struct {
	ID           int64
	Name         string
	Version      string
	ProcessorID  int64
	WindowTypeID int64
	Created      pgtype.Timestamp
	ResultType   NullResultType
}

type AlgorithmDependency struct {
	ID               int64
	FromAlgorithmID  int64
	ToAlgorithmID    int64
	FromWindowTypeID int64
	ToWindowTypeID   int64
	FromProcessorID  int64
	ToProcessorID    int64
	Created          pgtype.Timestamp
}

type AlgorithmExecutionPath struct {
	FinalAlgoID      int64
	NumDependencies  int32
	AlgoIDPath       string
	WindowTypeIDPath string
	ProcIDPath       string
}

type Processor struct {
	ID               int64
	Name             string
	Runtime          string
	ConnectionString string
	Created          pgtype.Timestamp
}

type Result struct {
	ID           int64
	WindowsID    pgtype.Int8
	WindowTypeID pgtype.Int8
	AlgorithmID  pgtype.Int8
	ResultValue  pgtype.Float8
	ResultArray  []float64
	ResultJson   []byte
}

type Window struct {
	ID           int64
	WindowTypeID int64
	TimeFrom     int64
	TimeTo       int64
	Origin       string
	Metadata     []byte
	Created      pgtype.Timestamp
}

type WindowType struct {
	ID          int64
	Name        string
	Version     string
	Description string
	Created     pgtype.Timestamp
}
