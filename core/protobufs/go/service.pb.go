// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: service.proto

package _go

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ResultStatus indicates the outcome of algorithm execution
type ResultStatus int32

const (
	// Algorithm failed but the error was handled gracefully
	// The system may retry or skip depending on configuration
	ResultStatus_RESULT_STATUS_HANDLED_FAILED ResultStatus = 0
	// Algorithm failed with an unexpected error
	// Requires investigation and may halt dependent processing
	ResultStatus_RESULT_STATUS_UNHANDLED_FAILED ResultStatus = 1
	// Algorithm completed successfully
	// Results are valid and can be used by dependent algorithms
	ResultStatus_RESULT_STATUS_SUCEEDED ResultStatus = 2
)

// Enum value maps for ResultStatus.
var (
	ResultStatus_name = map[int32]string{
		0: "RESULT_STATUS_HANDLED_FAILED",
		1: "RESULT_STATUS_UNHANDLED_FAILED",
		2: "RESULT_STATUS_SUCEEDED",
	}
	ResultStatus_value = map[string]int32{
		"RESULT_STATUS_HANDLED_FAILED":   0,
		"RESULT_STATUS_UNHANDLED_FAILED": 1,
		"RESULT_STATUS_SUCEEDED":         2,
	}
)

func (x ResultStatus) Enum() *ResultStatus {
	p := new(ResultStatus)
	*p = x
	return p
}

func (x ResultStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[0].Descriptor()
}

func (ResultStatus) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[0]
}

func (x ResultStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultStatus.Descriptor instead.
func (ResultStatus) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

// Status of execution
type DataGetterResult_Status int32

const (
	DataGetterResult_SUCCESS            DataGetterResult_Status = 0
	DataGetterResult_FAILED             DataGetterResult_Status = 1
	DataGetterResult_CACHE_STORE_FAILED DataGetterResult_Status = 2
)

// Enum value maps for DataGetterResult_Status.
var (
	DataGetterResult_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
		2: "CACHE_STORE_FAILED",
	}
	DataGetterResult_Status_value = map[string]int32{
		"SUCCESS":            0,
		"FAILED":             1,
		"CACHE_STORE_FAILED": 2,
	}
)

func (x DataGetterResult_Status) Enum() *DataGetterResult_Status {
	p := new(DataGetterResult_Status)
	*p = x
	return p
}

func (x DataGetterResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataGetterResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[1].Descriptor()
}

func (DataGetterResult_Status) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[1]
}

func (x DataGetterResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataGetterResult_Status.Descriptor instead.
func (DataGetterResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4, 0}
}

// A status enum that captures scenarios regarding a window being emmited
type WindowEmitResponse_StatusEnum int32

const (
	// When no algorithms could be found that are triggered by this window
	WindowEmitResponse_NO_TRIGGERED_ALGORITHMS WindowEmitResponse_StatusEnum = 0
	// When processing has successfully been triggered
	WindowEmitResponse_PROCESSING_TRIGGERED WindowEmitResponse_StatusEnum = 1
	// When triggering has failed
	WindowEmitResponse_TRIGGERING_FAILED WindowEmitResponse_StatusEnum = 2
)

// Enum value maps for WindowEmitResponse_StatusEnum.
var (
	WindowEmitResponse_StatusEnum_name = map[int32]string{
		0: "NO_TRIGGERED_ALGORITHMS",
		1: "PROCESSING_TRIGGERED",
		2: "TRIGGERING_FAILED",
	}
	WindowEmitResponse_StatusEnum_value = map[string]int32{
		"NO_TRIGGERED_ALGORITHMS": 0,
		"PROCESSING_TRIGGERED":    1,
		"TRIGGERING_FAILED":       2,
	}
)

func (x WindowEmitResponse_StatusEnum) Enum() *WindowEmitResponse_StatusEnum {
	p := new(WindowEmitResponse_StatusEnum)
	*p = x
	return p
}

func (x WindowEmitResponse_StatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowEmitResponse_StatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[2].Descriptor()
}

func (WindowEmitResponse_StatusEnum) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[2]
}

func (x WindowEmitResponse_StatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowEmitResponse_StatusEnum.Descriptor instead.
func (WindowEmitResponse_StatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10, 0}
}

// Overall health status of the processor
type HealthCheckResponse_Status int32

const (
	// Unknown status - should never be used
	HealthCheckResponse_STATUS_UNKNOWN HealthCheckResponse_Status = 0
	// Processor is healthy and ready to accept tasks
	HealthCheckResponse_STATUS_SERVING HealthCheckResponse_Status = 1
	// Processor is starting up or shutting down
	HealthCheckResponse_STATUS_TRANSITIONING HealthCheckResponse_Status = 2
	// Processor is not healthy and cannot accept tasks
	HealthCheckResponse_STATUS_NOT_SERVING HealthCheckResponse_Status = 3
)

// Enum value maps for HealthCheckResponse_Status.
var (
	HealthCheckResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_SERVING",
		2: "STATUS_TRANSITIONING",
		3: "STATUS_NOT_SERVING",
	}
	HealthCheckResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":       0,
		"STATUS_SERVING":       1,
		"STATUS_TRANSITIONING": 2,
		"STATUS_NOT_SERVING":   3,
	}
)

func (x HealthCheckResponse_Status) Enum() *HealthCheckResponse_Status {
	p := new(HealthCheckResponse_Status)
	*p = x
	return p
}

func (x HealthCheckResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[3].Descriptor()
}

func (HealthCheckResponse_Status) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[3]
}

func (x HealthCheckResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckResponse_Status.Descriptor instead.
func (HealthCheckResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21, 0}
}

// DataGetter defines a function that accepts a Window and returns some binary data
// that is consumed by algorithms.
type DataGetter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the data getter - must be unique within a processor
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The window type that this data getter is triggered by
	WindowType *WindowType `protobuf:"bytes,2,opt,name=window_type,json=windowType,proto3" json:"window_type,omitempty"`
	// TTL for cache entries in seconds (0 = no expiration - default)
	TtlSeconds int32 `protobuf:"varint,3,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
	// Maximum size of cached data in bytes (0 = no limit - default)
	MaxSizeBytes  int64 `protobuf:"varint,4,opt,name=max_size_bytes,json=maxSizeBytes,proto3" json:"max_size_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataGetter) Reset() {
	*x = DataGetter{}
	mi := &file_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataGetter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataGetter) ProtoMessage() {}

func (x *DataGetter) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataGetter.ProtoReflect.Descriptor instead.
func (*DataGetter) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *DataGetter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataGetter) GetWindowType() *WindowType {
	if x != nil {
		return x.WindowType
	}
	return nil
}

func (x *DataGetter) GetTtlSeconds() int32 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

func (x *DataGetter) GetMaxSizeBytes() int64 {
	if x != nil {
		return x.MaxSizeBytes
	}
	return 0
}

type DataGetterDependency struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the data getter - must be unique within a processor
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The window type that this data getter is triggered by
	WindowType    *WindowType `protobuf:"bytes,2,opt,name=window_type,json=windowType,proto3" json:"window_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataGetterDependency) Reset() {
	*x = DataGetterDependency{}
	mi := &file_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataGetterDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataGetterDependency) ProtoMessage() {}

func (x *DataGetterDependency) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataGetterDependency.ProtoReflect.Descriptor instead.
func (*DataGetterDependency) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *DataGetterDependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataGetterDependency) GetWindowType() *WindowType {
	if x != nil {
		return x.WindowType
	}
	return nil
}

// Cache connection information
type CacheConnectionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cache type (i.e. one of: "redis")
	CacheType string `protobuf:"bytes,1,opt,name=cache_type,json=cacheType,proto3" json:"cache_type,omitempty"`
	// Connection string (e.g., "redis://localhost:6379")
	ConnectionString string `protobuf:"bytes,2,opt,name=connection_string,json=connectionString,proto3" json:"connection_string,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CacheConnectionInfo) Reset() {
	*x = CacheConnectionInfo{}
	mi := &file_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheConnectionInfo) ProtoMessage() {}

func (x *CacheConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheConnectionInfo.ProtoReflect.Descriptor instead.
func (*CacheConnectionInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *CacheConnectionInfo) GetCacheType() string {
	if x != nil {
		return x.CacheType
	}
	return ""
}

func (x *CacheConnectionInfo) GetConnectionString() string {
	if x != nil {
		return x.ConnectionString
	}
	return ""
}

// Task sent to processor to execute a data getter and cache the results
type DataGetterExecutionTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique execution ID
	ExecutionId string `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// Window context for the data getter
	Window *Window `protobuf:"bytes,2,opt,name=window,proto3" json:"window,omitempty"`
	// Data getter to execute
	DataGetter *DataGetter `protobuf:"bytes,3,opt,name=data_getter,json=dataGetter,proto3" json:"data_getter,omitempty"`
	// Cache key to store results under
	CacheKey string `protobuf:"bytes,4,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key,omitempty"`
	// Cache connection information
	CacheInfo     *CacheConnectionInfo `protobuf:"bytes,5,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataGetterExecutionTask) Reset() {
	*x = DataGetterExecutionTask{}
	mi := &file_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataGetterExecutionTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataGetterExecutionTask) ProtoMessage() {}

func (x *DataGetterExecutionTask) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataGetterExecutionTask.ProtoReflect.Descriptor instead.
func (*DataGetterExecutionTask) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *DataGetterExecutionTask) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *DataGetterExecutionTask) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *DataGetterExecutionTask) GetDataGetter() *DataGetter {
	if x != nil {
		return x.DataGetter
	}
	return nil
}

func (x *DataGetterExecutionTask) GetCacheKey() string {
	if x != nil {
		return x.CacheKey
	}
	return ""
}

func (x *DataGetterExecutionTask) GetCacheInfo() *CacheConnectionInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

// Result of data getter execution
type DataGetterResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Execution ID
	ExecutionId string                  `protobuf:"bytes,1,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	Status      DataGetterResult_Status `protobuf:"varint,2,opt,name=status,proto3,enum=DataGetterResult_Status" json:"status,omitempty"`
	// Cache key where data was stored if successful
	CacheKey string `protobuf:"bytes,3,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key,omitempty"`
	// Size of cached data in bytes
	DataSizeBytes int64 `protobuf:"varint,4,opt,name=data_size_bytes,json=dataSizeBytes,proto3" json:"data_size_bytes,omitempty"`
	// Error message if failed
	ErrorMessage string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Timestamp when completed
	Timestamp     int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataGetterResult) Reset() {
	*x = DataGetterResult{}
	mi := &file_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataGetterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataGetterResult) ProtoMessage() {}

func (x *DataGetterResult) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataGetterResult.ProtoReflect.Descriptor instead.
func (*DataGetterResult) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *DataGetterResult) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *DataGetterResult) GetStatus() DataGetterResult_Status {
	if x != nil {
		return x.Status
	}
	return DataGetterResult_SUCCESS
}

func (x *DataGetterResult) GetCacheKey() string {
	if x != nil {
		return x.CacheKey
	}
	return ""
}

func (x *DataGetterResult) GetDataSizeBytes() int64 {
	if x != nil {
		return x.DataSizeBytes
	}
	return 0
}

func (x *DataGetterResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *DataGetterResult) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Reference to cached data for algorithms
type CachedDataReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the data getter that produced this data
	DataGetterName string `protobuf:"bytes,1,opt,name=data_getter_name,json=dataGetterName,proto3" json:"data_getter_name,omitempty"`
	// Cache key where the data is stored
	CacheKey string `protobuf:"bytes,2,opt,name=cache_key,json=cacheKey,proto3" json:"cache_key,omitempty"`
	// Cache connection info
	CacheInfo *CacheConnectionInfo `protobuf:"bytes,3,opt,name=cache_info,json=cacheInfo,proto3" json:"cache_info,omitempty"`
	// Timestamp when data was cached
	CachedTimestamp int64 `protobuf:"varint,4,opt,name=cached_timestamp,json=cachedTimestamp,proto3" json:"cached_timestamp,omitempty"`
	// Size of cached data
	DataSizeBytes int64 `protobuf:"varint,5,opt,name=data_size_bytes,json=dataSizeBytes,proto3" json:"data_size_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CachedDataReference) Reset() {
	*x = CachedDataReference{}
	mi := &file_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CachedDataReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachedDataReference) ProtoMessage() {}

func (x *CachedDataReference) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachedDataReference.ProtoReflect.Descriptor instead.
func (*CachedDataReference) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *CachedDataReference) GetDataGetterName() string {
	if x != nil {
		return x.DataGetterName
	}
	return ""
}

func (x *CachedDataReference) GetCacheKey() string {
	if x != nil {
		return x.CacheKey
	}
	return ""
}

func (x *CachedDataReference) GetCacheInfo() *CacheConnectionInfo {
	if x != nil {
		return x.CacheInfo
	}
	return nil
}

func (x *CachedDataReference) GetCachedTimestamp() int64 {
	if x != nil {
		return x.CachedTimestamp
	}
	return 0
}

func (x *CachedDataReference) GetDataSizeBytes() int64 {
	if x != nil {
		return x.DataSizeBytes
	}
	return 0
}

// Window represents a time-bounded processing context that triggers algorithm execution.
// Windows are the primary input that start DAG processing flows.
type Window struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time that the window starts - nanoseconds since epoch
	// Required: Must be > 0 and < to
	TimeFrom uint64 `protobuf:"varint,1,opt,name=time_from,json=timeFrom,proto3" json:"time_from,omitempty"`
	// Time that the window ends - nanoseconds since epoch
	// Required: Must be > from
	TimeTo uint64 `protobuf:"varint,2,opt,name=time_to,json=timeTo,proto3" json:"time_to,omitempty"`
	// The canonical name of the window that uniquely identifies it
	// This allows tracking of window state and results across the system
	// Required: Must be unique within the system, and refer directly to
	// window type
	WindowTypeName string `protobuf:"bytes,3,opt,name=window_type_name,json=windowTypeName,proto3" json:"window_type_name,omitempty"`
	// The version of the window type, as defined by WindoType
	WindowTypeVersion string `protobuf:"bytes,4,opt,name=window_type_version,json=windowTypeVersion,proto3" json:"window_type_version,omitempty"`
	// A unique identifier that defines where the window came from
	Origin string `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	// Additional metadata specific to this instance of `WindowType`.
	// E.g. Asset information
	// Must be provided as an arbitrary struct
	Metadata      *structpb.Struct `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Window) Reset() {
	*x = Window{}
	mi := &file_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *Window) GetTimeFrom() uint64 {
	if x != nil {
		return x.TimeFrom
	}
	return 0
}

func (x *Window) GetTimeTo() uint64 {
	if x != nil {
		return x.TimeTo
	}
	return 0
}

func (x *Window) GetWindowTypeName() string {
	if x != nil {
		return x.WindowTypeName
	}
	return ""
}

func (x *Window) GetWindowTypeVersion() string {
	if x != nil {
		return x.WindowTypeVersion
	}
	return ""
}

func (x *Window) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Window) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// WindowType defines a category of window that can trigger algorithms.
// Algorithms subscribe to window types to indicate when they should be executed.
type WindowType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the window type - must be globally unique
	// Examples: "daily", "hourly", "market_close", "event_triggered"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the algorithm. Follows basic semver and allows window
	// types to be changed over time, with traceability
	Version       string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowType) Reset() {
	*x = WindowType{}
	mi := &file_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowType) ProtoMessage() {}

func (x *WindowType) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowType.ProtoReflect.Descriptor instead.
func (*WindowType) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *WindowType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WindowType) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// response message when windows types are registered
type WindowTypeRegResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowTypeRegResponse) Reset() {
	*x = WindowTypeRegResponse{}
	mi := &file_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowTypeRegResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowTypeRegResponse) ProtoMessage() {}

func (x *WindowTypeRegResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowTypeRegResponse.ProtoReflect.Descriptor instead.
func (*WindowTypeRegResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

// response message when a processor is registered
type ProcRegResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcRegResponse) Reset() {
	*x = ProcRegResponse{}
	mi := &file_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcRegResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcRegResponse) ProtoMessage() {}

func (x *ProcRegResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcRegResponse.ProtoReflect.Descriptor instead.
func (*ProcRegResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

// response message when windows are emitted
type WindowEmitResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Status        WindowEmitResponse_StatusEnum `protobuf:"varint,1,opt,name=status,proto3,enum=WindowEmitResponse_StatusEnum" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowEmitResponse) Reset() {
	*x = WindowEmitResponse{}
	mi := &file_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowEmitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowEmitResponse) ProtoMessage() {}

func (x *WindowEmitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowEmitResponse.ProtoReflect.Descriptor instead.
func (*WindowEmitResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *WindowEmitResponse) GetStatus() WindowEmitResponse_StatusEnum {
	if x != nil {
		return x.Status
	}
	return WindowEmitResponse_NO_TRIGGERED_ALGORITHMS
}

// AlgorithmDependency defines a requirement that one algorithm has on another's results.
// These dependencies form the edges in the processing DAG.
type AlgorithmDependency struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the required algorithm
	// Must reference an existing algorithm name in the system
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the required algorithm
	// Must follow semantic versioning (e.g., "1.0.0")
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Name of the processor that the algorithm is associated with
	ProcessorName string `protobuf:"bytes,3,opt,name=processor_name,json=processorName,proto3" json:"processor_name,omitempty"`
	// Runtime of the processor that the algorithm is associated with
	ProcessorRuntime string `protobuf:"bytes,4,opt,name=processor_runtime,json=processorRuntime,proto3" json:"processor_runtime,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AlgorithmDependency) Reset() {
	*x = AlgorithmDependency{}
	mi := &file_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmDependency) ProtoMessage() {}

func (x *AlgorithmDependency) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmDependency.ProtoReflect.Descriptor instead.
func (*AlgorithmDependency) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *AlgorithmDependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlgorithmDependency) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AlgorithmDependency) GetProcessorName() string {
	if x != nil {
		return x.ProcessorName
	}
	return ""
}

func (x *AlgorithmDependency) GetProcessorRuntime() string {
	if x != nil {
		return x.ProcessorRuntime
	}
	return ""
}

// Algorithm defines a processing unit that can be executed by processors.
// Algorithms form the nodes in the processing DAG and are triggered by specific window types.
type Algorithm struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the algorithm - must be globally unique
	// This identifies the algorithm across the system
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the algorithm - must follow semantic versioning
	// Allows for algorithm evolution while maintaining compatibility
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Type of window that triggers this algorithm
	// References a WindowType that will cause this algorithm to execute
	WindowType *WindowType `protobuf:"bytes,3,opt,name=window_type,json=windowType,proto3" json:"window_type,omitempty"`
	// Other algorithms that this algorithm depends on
	// The algorithm won't execute until all dependencies have completed
	// Dependencies must not form cycles - this is statically checked on processor registration
	Dependencies []*AlgorithmDependency `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// Required datagetters for this algorithm to run
	RequiredDataGetters []*DataGetterDependency `protobuf:"bytes,5,rep,name=required_data_getters,json=requiredDataGetters,proto3" json:"required_data_getters,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Algorithm) Reset() {
	*x = Algorithm{}
	mi := &file_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Algorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithm) ProtoMessage() {}

func (x *Algorithm) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithm.ProtoReflect.Descriptor instead.
func (*Algorithm) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *Algorithm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Algorithm) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Algorithm) GetWindowType() *WindowType {
	if x != nil {
		return x.WindowType
	}
	return nil
}

func (x *Algorithm) GetDependencies() []*AlgorithmDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Algorithm) GetRequiredDataGetters() []*DataGetterDependency {
	if x != nil {
		return x.RequiredDataGetters
	}
	return nil
}

// Container for array of float values
type FloatArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []float32              `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FloatArray) Reset() {
	*x = FloatArray{}
	mi := &file_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatArray) ProtoMessage() {}

func (x *FloatArray) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatArray.ProtoReflect.Descriptor instead.
func (*FloatArray) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *FloatArray) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Result of an algorithm execution
type Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status of the result execution
	Status ResultStatus `protobuf:"varint,1,opt,name=status,proto3,enum=ResultStatus" json:"status,omitempty"`
	// The actual result data - can be either an array of floats or a structured object
	//
	// Types that are valid to be assigned to ResultData:
	//
	//	*Result_SingleValue
	//	*Result_FloatValues
	//	*Result_StructValue
	ResultData isResult_ResultData `protobuf_oneof:"result_data"`
	// Timestamp when the result was produced
	Timestamp     int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *Result) GetStatus() ResultStatus {
	if x != nil {
		return x.Status
	}
	return ResultStatus_RESULT_STATUS_HANDLED_FAILED
}

func (x *Result) GetResultData() isResult_ResultData {
	if x != nil {
		return x.ResultData
	}
	return nil
}

func (x *Result) GetSingleValue() float32 {
	if x != nil {
		if x, ok := x.ResultData.(*Result_SingleValue); ok {
			return x.SingleValue
		}
	}
	return 0
}

func (x *Result) GetFloatValues() *FloatArray {
	if x != nil {
		if x, ok := x.ResultData.(*Result_FloatValues); ok {
			return x.FloatValues
		}
	}
	return nil
}

func (x *Result) GetStructValue() *structpb.Struct {
	if x != nil {
		if x, ok := x.ResultData.(*Result_StructValue); ok {
			return x.StructValue
		}
	}
	return nil
}

func (x *Result) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type isResult_ResultData interface {
	isResult_ResultData()
}

type Result_SingleValue struct {
	// for single number results
	SingleValue float32 `protobuf:"fixed32,2,opt,name=single_value,json=singleValue,proto3,oneof"`
}

type Result_FloatValues struct {
	// For numeric array results
	FloatValues *FloatArray `protobuf:"bytes,3,opt,name=float_values,json=floatValues,proto3,oneof"`
}

type Result_StructValue struct {
	// For structured data results (JSON-like)
	// Must follow a map<string, value> schema where value corresponds to https://protobuf.dev/reference/protobuf/google.protobuf/#value
	StructValue *structpb.Struct `protobuf:"bytes,4,opt,name=struct_value,json=structValue,proto3,oneof"`
}

func (*Result_SingleValue) isResult_ResultData() {}

func (*Result_FloatValues) isResult_ResultData() {}

func (*Result_StructValue) isResult_ResultData() {}

// WindowRegistration is sent by any service that wants to register a window with the orca service
type WindowRegistration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The window type to register
	WindowType    *WindowType `protobuf:"bytes,1,opt,name=window_type,json=windowType,proto3" json:"window_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WindowRegistration) Reset() {
	*x = WindowRegistration{}
	mi := &file_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WindowRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowRegistration) ProtoMessage() {}

func (x *WindowRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowRegistration.ProtoReflect.Descriptor instead.
func (*WindowRegistration) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *WindowRegistration) GetWindowType() *WindowType {
	if x != nil {
		return x.WindowType
	}
	return nil
}

// ProcessorRegistration is sent by processors when they start up to announce their capabilities
// to the orchestrator. This establishes a long-lived connection for receiving tasks.
type ProcessorRegistration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique name of the runtime
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Language/runtime of the processor
	// Examples: "python3.9", "go1.19", "Rust4.1"
	Runtime string `protobuf:"bytes,2,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// The connection string of the processor
	// e.g. grpc://localhost:5433
	ConnectionStr string `protobuf:"bytes,3,opt,name=connection_str,json=connectionStr,proto3" json:"connection_str,omitempty"`
	// Window types that this processor defines
	WindowType []*WindowType `protobuf:"bytes,4,rep,name=window_type,json=windowType,proto3" json:"window_type,omitempty"`
	// Data getters that this processor owns
	DataGetters []*DataGetter `protobuf:"bytes,5,rep,name=data_getters,json=dataGetters,proto3" json:"data_getters,omitempty"`
	// Algorithms this processor can execute
	SupportedAlgorithms []*Algorithm `protobuf:"bytes,6,rep,name=supported_algorithms,json=supportedAlgorithms,proto3" json:"supported_algorithms,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProcessorRegistration) Reset() {
	*x = ProcessorRegistration{}
	mi := &file_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessorRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorRegistration) ProtoMessage() {}

func (x *ProcessorRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorRegistration.ProtoReflect.Descriptor instead.
func (*ProcessorRegistration) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

func (x *ProcessorRegistration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessorRegistration) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *ProcessorRegistration) GetConnectionStr() string {
	if x != nil {
		return x.ConnectionStr
	}
	return ""
}

func (x *ProcessorRegistration) GetWindowType() []*WindowType {
	if x != nil {
		return x.WindowType
	}
	return nil
}

func (x *ProcessorRegistration) GetDataGetters() []*DataGetter {
	if x != nil {
		return x.DataGetters
	}
	return nil
}

func (x *ProcessorRegistration) GetSupportedAlgorithms() []*Algorithm {
	if x != nil {
		return x.SupportedAlgorithms
	}
	return nil
}

// ExecutionRequest provides a complete view of a processing DAG's execution
// status for a specific window. Used for monitoring and debugging.
type ExecutionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The exec_id
	ExecId string `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	// The window that triggered the algorithm
	Window *Window `protobuf:"bytes,2,opt,name=window,proto3" json:"window,omitempty"`
	// Results from dependant algorithms
	AlgorithmResults []*AlgorithmResult `protobuf:"bytes,3,rep,name=algorithm_results,json=algorithmResults,proto3" json:"algorithm_results,omitempty"`
	// The algorithms to execute
	Algorithms []*Algorithm `protobuf:"bytes,4,rep,name=algorithms,proto3" json:"algorithms,omitempty"`
	// References to cached data from data getters
	CachedData    []*CachedDataReference `protobuf:"bytes,5,rep,name=cached_data,json=cachedData,proto3" json:"cached_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutionRequest) Reset() {
	*x = ExecutionRequest{}
	mi := &file_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionRequest) ProtoMessage() {}

func (x *ExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionRequest.ProtoReflect.Descriptor instead.
func (*ExecutionRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

func (x *ExecutionRequest) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

func (x *ExecutionRequest) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *ExecutionRequest) GetAlgorithmResults() []*AlgorithmResult {
	if x != nil {
		return x.AlgorithmResults
	}
	return nil
}

func (x *ExecutionRequest) GetAlgorithms() []*Algorithm {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

func (x *ExecutionRequest) GetCachedData() []*CachedDataReference {
	if x != nil {
		return x.CachedData
	}
	return nil
}

type ExecutionResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Exec ID
	ExecId string `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	// The algorithn result
	AlgorithmResult *AlgorithmResult `protobuf:"bytes,3,opt,name=algorithm_result,json=algorithmResult,proto3" json:"algorithm_result,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExecutionResult) Reset() {
	*x = ExecutionResult{}
	mi := &file_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionResult) ProtoMessage() {}

func (x *ExecutionResult) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionResult.ProtoReflect.Descriptor instead.
func (*ExecutionResult) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18}
}

func (x *ExecutionResult) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

func (x *ExecutionResult) GetAlgorithmResult() *AlgorithmResult {
	if x != nil {
		return x.AlgorithmResult
	}
	return nil
}

// AlgorithmWindowResult Packaged algorithm and result to a window
type AlgorithmResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     *Algorithm             `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Result        *Result                `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmResult) Reset() {
	*x = AlgorithmResult{}
	mi := &file_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmResult) ProtoMessage() {}

func (x *AlgorithmResult) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmResult.ProtoReflect.Descriptor instead.
func (*AlgorithmResult) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{19}
}

func (x *AlgorithmResult) GetAlgorithm() *Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *AlgorithmResult) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// HealthCheckRequest is sent to processors to verify they are functioning
type HealthCheckRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp of the request in unix epoch milliseconds
	// Used to measure response latency
	Timestamp     int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{20}
}

func (x *HealthCheckRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// HealthCheckResponse indicates the health status of a processor
type HealthCheckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current health status
	Status HealthCheckResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=HealthCheckResponse_Status" json:"status,omitempty"`
	// Optional message providing more detail about the health status
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// System metrics about the processor
	Metrics       *ProcessorMetrics `protobuf:"bytes,3,opt,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21}
}

func (x *HealthCheckResponse) GetStatus() HealthCheckResponse_Status {
	if x != nil {
		return x.Status
	}
	return HealthCheckResponse_STATUS_UNKNOWN
}

func (x *HealthCheckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HealthCheckResponse) GetMetrics() *ProcessorMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// ProcessorMetrics provides runtime information about a processor
type ProcessorMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of algorithms currently being executed
	ActiveTasks int32 `protobuf:"varint,1,opt,name=active_tasks,json=activeTasks,proto3" json:"active_tasks,omitempty"`
	// Memory usage in bytes
	MemoryBytes int64 `protobuf:"varint,2,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
	// CPU usage percentage (0-100)
	CpuPercent float32 `protobuf:"fixed32,3,opt,name=cpu_percent,json=cpuPercent,proto3" json:"cpu_percent,omitempty"`
	// Time since processor started in seconds
	UptimeSeconds int64 `protobuf:"varint,4,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessorMetrics) Reset() {
	*x = ProcessorMetrics{}
	mi := &file_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessorMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorMetrics) ProtoMessage() {}

func (x *ProcessorMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorMetrics.ProtoReflect.Descriptor instead.
func (*ProcessorMetrics) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{22}
}

func (x *ProcessorMetrics) GetActiveTasks() int32 {
	if x != nil {
		return x.ActiveTasks
	}
	return 0
}

func (x *ProcessorMetrics) GetMemoryBytes() int64 {
	if x != nil {
		return x.MemoryBytes
	}
	return 0
}

func (x *ProcessorMetrics) GetCpuPercent() float32 {
	if x != nil {
		return x.CpuPercent
	}
	return 0
}

func (x *ProcessorMetrics) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x14,
	0x44, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x13, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x85, 0x02, 0x0a, 0x17, 0x44, 0x61,
	0x74, 0x61, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xc2, 0x02, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x39, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x22, 0xfc, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x27, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x32, 0x02, 0x20, 0x00, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x12, 0x30, 0x0a, 0x10, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x13,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x11, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x6d, 0xba, 0x48, 0x6a, 0x1a, 0x68,
	0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f,
	0x12, 0x36, 0x60, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x60, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e,
	0x20, 0x6f, 0x72, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x60, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x60, 0x1a, 0x1e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x20, 0x3e, 0x3d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x4a, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x65, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb0, 0x01, 0x0a, 0x12, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x45, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5a, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x53,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x02,
	0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1a, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x15, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x47,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x24, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0b,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a,
	0x0a, 0x12, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x15, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x12, 0x2c, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x3d, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x22, 0xfe,
	0x01, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x65, 0x78,
	0x65, 0x63, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3d, 0x0a,
	0x11, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x0a,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0a, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x77, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x65, 0x78, 0x65,
	0x63, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6c, 0x0a, 0x0f, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x27, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3a, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xfd, 0x01, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x62,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2a, 0x70, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x48, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x32, 0xb8, 0x01, 0x0a, 0x08, 0x4f, 0x72, 0x63, 0x61,
	0x43, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x2e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x16, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x52, 0x65, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x45, 0x6d, 0x69, 0x74, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x07, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x13, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xc4, 0x01, 0x0a, 0x0d, 0x4f, 0x72, 0x63, 0x61, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44,
	0x61, 0x67, 0x50, 0x61, 0x72, 0x74, 0x12, 0x11, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x38, 0x0a,
	0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x11, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x47, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x78, 0x75, 0x73,
	0x2f, 0x6f, 0x72, 0x63, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f,
	0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData []byte
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_service_proto_rawDesc), len(file_service_proto_rawDesc)))
	})
	return file_service_proto_rawDescData
}

var file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_service_proto_goTypes = []any{
	(ResultStatus)(0),                  // 0: ResultStatus
	(DataGetterResult_Status)(0),       // 1: DataGetterResult.Status
	(WindowEmitResponse_StatusEnum)(0), // 2: WindowEmitResponse.StatusEnum
	(HealthCheckResponse_Status)(0),    // 3: HealthCheckResponse.Status
	(*DataGetter)(nil),                 // 4: DataGetter
	(*DataGetterDependency)(nil),       // 5: DataGetterDependency
	(*CacheConnectionInfo)(nil),        // 6: CacheConnectionInfo
	(*DataGetterExecutionTask)(nil),    // 7: DataGetterExecutionTask
	(*DataGetterResult)(nil),           // 8: DataGetterResult
	(*CachedDataReference)(nil),        // 9: CachedDataReference
	(*Window)(nil),                     // 10: Window
	(*WindowType)(nil),                 // 11: WindowType
	(*WindowTypeRegResponse)(nil),      // 12: WindowTypeRegResponse
	(*ProcRegResponse)(nil),            // 13: ProcRegResponse
	(*WindowEmitResponse)(nil),         // 14: WindowEmitResponse
	(*AlgorithmDependency)(nil),        // 15: AlgorithmDependency
	(*Algorithm)(nil),                  // 16: Algorithm
	(*FloatArray)(nil),                 // 17: FloatArray
	(*Result)(nil),                     // 18: Result
	(*WindowRegistration)(nil),         // 19: WindowRegistration
	(*ProcessorRegistration)(nil),      // 20: ProcessorRegistration
	(*ExecutionRequest)(nil),           // 21: ExecutionRequest
	(*ExecutionResult)(nil),            // 22: ExecutionResult
	(*AlgorithmResult)(nil),            // 23: AlgorithmResult
	(*HealthCheckRequest)(nil),         // 24: HealthCheckRequest
	(*HealthCheckResponse)(nil),        // 25: HealthCheckResponse
	(*ProcessorMetrics)(nil),           // 26: ProcessorMetrics
	(*structpb.Struct)(nil),            // 27: google.protobuf.Struct
}
var file_service_proto_depIdxs = []int32{
	11, // 0: DataGetter.window_type:type_name -> WindowType
	11, // 1: DataGetterDependency.window_type:type_name -> WindowType
	10, // 2: DataGetterExecutionTask.window:type_name -> Window
	4,  // 3: DataGetterExecutionTask.data_getter:type_name -> DataGetter
	6,  // 4: DataGetterExecutionTask.cache_info:type_name -> CacheConnectionInfo
	1,  // 5: DataGetterResult.status:type_name -> DataGetterResult.Status
	6,  // 6: CachedDataReference.cache_info:type_name -> CacheConnectionInfo
	27, // 7: Window.metadata:type_name -> google.protobuf.Struct
	2,  // 8: WindowEmitResponse.status:type_name -> WindowEmitResponse.StatusEnum
	11, // 9: Algorithm.window_type:type_name -> WindowType
	15, // 10: Algorithm.dependencies:type_name -> AlgorithmDependency
	5,  // 11: Algorithm.required_data_getters:type_name -> DataGetterDependency
	0,  // 12: Result.status:type_name -> ResultStatus
	17, // 13: Result.float_values:type_name -> FloatArray
	27, // 14: Result.struct_value:type_name -> google.protobuf.Struct
	11, // 15: WindowRegistration.window_type:type_name -> WindowType
	11, // 16: ProcessorRegistration.window_type:type_name -> WindowType
	4,  // 17: ProcessorRegistration.data_getters:type_name -> DataGetter
	16, // 18: ProcessorRegistration.supported_algorithms:type_name -> Algorithm
	10, // 19: ExecutionRequest.window:type_name -> Window
	23, // 20: ExecutionRequest.algorithm_results:type_name -> AlgorithmResult
	16, // 21: ExecutionRequest.algorithms:type_name -> Algorithm
	9,  // 22: ExecutionRequest.cached_data:type_name -> CachedDataReference
	23, // 23: ExecutionResult.algorithm_result:type_name -> AlgorithmResult
	16, // 24: AlgorithmResult.algorithm:type_name -> Algorithm
	18, // 25: AlgorithmResult.result:type_name -> Result
	3,  // 26: HealthCheckResponse.status:type_name -> HealthCheckResponse.Status
	26, // 27: HealthCheckResponse.metrics:type_name -> ProcessorMetrics
	19, // 28: OrcaCore.RegisterWindowType:input_type -> WindowRegistration
	20, // 29: OrcaCore.RegisterProcessor:input_type -> ProcessorRegistration
	10, // 30: OrcaCore.EmitWindow:input_type -> Window
	21, // 31: OrcaProcessor.ExecuteDagPart:input_type -> ExecutionRequest
	24, // 32: OrcaProcessor.HealthCheck:input_type -> HealthCheckRequest
	7,  // 33: OrcaProcessor.ExecuteDataGetter:input_type -> DataGetterExecutionTask
	12, // 34: OrcaCore.RegisterWindowType:output_type -> WindowTypeRegResponse
	13, // 35: OrcaCore.RegisterProcessor:output_type -> ProcRegResponse
	14, // 36: OrcaCore.EmitWindow:output_type -> WindowEmitResponse
	22, // 37: OrcaProcessor.ExecuteDagPart:output_type -> ExecutionResult
	25, // 38: OrcaProcessor.HealthCheck:output_type -> HealthCheckResponse
	8,  // 39: OrcaProcessor.ExecuteDataGetter:output_type -> DataGetterResult
	34, // [34:40] is the sub-list for method output_type
	28, // [28:34] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	file_service_proto_msgTypes[14].OneofWrappers = []any{
		(*Result_SingleValue)(nil),
		(*Result_FloatValues)(nil),
		(*Result_StructValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_service_proto_rawDesc), len(file_service_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		EnumInfos:         file_service_proto_enumTypes,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
