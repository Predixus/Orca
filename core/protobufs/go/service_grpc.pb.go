// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrcaCore_RegisterWindowType_FullMethodName = "/OrcaCore/RegisterWindowType"
	OrcaCore_RegisterProcessor_FullMethodName  = "/OrcaCore/RegisterProcessor"
	OrcaCore_EmitWindow_FullMethodName         = "/OrcaCore/EmitWindow"
)

// OrcaCoreClient is the client API for OrcaCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OrcaCore is the central orchestration service that:
// - Manages the lifecycle of registering and processing windows
// - Coordinates algorithm execution across distributed processors
// - Tracks DAG dependencies and execution state
// - Routes results between dependent algorithms
// - Manages data getter caching and lifecycle
type OrcaCoreClient interface {
	// Register a window type with the orca service
	RegisterWindowType(ctx context.Context, in *WindowRegistration, opts ...grpc.CallOption) (*WindowTypeRegResponse, error)
	// Register a processor node and its supported algorithms
	RegisterProcessor(ctx context.Context, in *ProcessorRegistration, opts ...grpc.CallOption) (*ProcRegResponse, error)
	// Submit a window for processing
	EmitWindow(ctx context.Context, in *Window, opts ...grpc.CallOption) (*WindowEmitResponse, error)
}

type orcaCoreClient struct {
	cc grpc.ClientConnInterface
}

func NewOrcaCoreClient(cc grpc.ClientConnInterface) OrcaCoreClient {
	return &orcaCoreClient{cc}
}

func (c *orcaCoreClient) RegisterWindowType(ctx context.Context, in *WindowRegistration, opts ...grpc.CallOption) (*WindowTypeRegResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WindowTypeRegResponse)
	err := c.cc.Invoke(ctx, OrcaCore_RegisterWindowType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaCoreClient) RegisterProcessor(ctx context.Context, in *ProcessorRegistration, opts ...grpc.CallOption) (*ProcRegResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcRegResponse)
	err := c.cc.Invoke(ctx, OrcaCore_RegisterProcessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaCoreClient) EmitWindow(ctx context.Context, in *Window, opts ...grpc.CallOption) (*WindowEmitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WindowEmitResponse)
	err := c.cc.Invoke(ctx, OrcaCore_EmitWindow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrcaCoreServer is the server API for OrcaCore service.
// All implementations must embed UnimplementedOrcaCoreServer
// for forward compatibility.
//
// OrcaCore is the central orchestration service that:
// - Manages the lifecycle of registering and processing windows
// - Coordinates algorithm execution across distributed processors
// - Tracks DAG dependencies and execution state
// - Routes results between dependent algorithms
// - Manages data getter caching and lifecycle
type OrcaCoreServer interface {
	// Register a window type with the orca service
	RegisterWindowType(context.Context, *WindowRegistration) (*WindowTypeRegResponse, error)
	// Register a processor node and its supported algorithms
	RegisterProcessor(context.Context, *ProcessorRegistration) (*ProcRegResponse, error)
	// Submit a window for processing
	EmitWindow(context.Context, *Window) (*WindowEmitResponse, error)
	mustEmbedUnimplementedOrcaCoreServer()
}

// UnimplementedOrcaCoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrcaCoreServer struct{}

func (UnimplementedOrcaCoreServer) RegisterWindowType(context.Context, *WindowRegistration) (*WindowTypeRegResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWindowType not implemented")
}
func (UnimplementedOrcaCoreServer) RegisterProcessor(context.Context, *ProcessorRegistration) (*ProcRegResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProcessor not implemented")
}
func (UnimplementedOrcaCoreServer) EmitWindow(context.Context, *Window) (*WindowEmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitWindow not implemented")
}
func (UnimplementedOrcaCoreServer) mustEmbedUnimplementedOrcaCoreServer() {}
func (UnimplementedOrcaCoreServer) testEmbeddedByValue()                  {}

// UnsafeOrcaCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrcaCoreServer will
// result in compilation errors.
type UnsafeOrcaCoreServer interface {
	mustEmbedUnimplementedOrcaCoreServer()
}

func RegisterOrcaCoreServer(s grpc.ServiceRegistrar, srv OrcaCoreServer) {
	// If the following call pancis, it indicates UnimplementedOrcaCoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrcaCore_ServiceDesc, srv)
}

func _OrcaCore_RegisterWindowType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WindowRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaCoreServer).RegisterWindowType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrcaCore_RegisterWindowType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaCoreServer).RegisterWindowType(ctx, req.(*WindowRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrcaCore_RegisterProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessorRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaCoreServer).RegisterProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrcaCore_RegisterProcessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaCoreServer).RegisterProcessor(ctx, req.(*ProcessorRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrcaCore_EmitWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Window)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaCoreServer).EmitWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrcaCore_EmitWindow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaCoreServer).EmitWindow(ctx, req.(*Window))
	}
	return interceptor(ctx, in, info, handler)
}

// OrcaCore_ServiceDesc is the grpc.ServiceDesc for OrcaCore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrcaCore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrcaCore",
	HandlerType: (*OrcaCoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWindowType",
			Handler:    _OrcaCore_RegisterWindowType_Handler,
		},
		{
			MethodName: "RegisterProcessor",
			Handler:    _OrcaCore_RegisterProcessor_Handler,
		},
		{
			MethodName: "EmitWindow",
			Handler:    _OrcaCore_EmitWindow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	OrcaProcessor_ExecuteDagPart_FullMethodName    = "/OrcaProcessor/ExecuteDagPart"
	OrcaProcessor_HealthCheck_FullMethodName       = "/OrcaProcessor/HealthCheck"
	OrcaProcessor_ExecuteDataGetter_FullMethodName = "/OrcaProcessor/ExecuteDataGetter"
)

// OrcaProcessorClient is the client API for OrcaProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OrcaProcessor defines the interface that each processing node must implement.
// Processors are language-agnostic services that:
// - Execute individual algorithms
// - Handle their own internal state
// - Report results back to the orchestrator
// Orca will schedule processors asynchronously as per the DAG
type OrcaProcessorClient interface {
	// Execute part of a DAG with streaming results
	// Server streams back execution results as they become available
	ExecuteDagPart(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecutionResult], error)
	// Check health/status of processor. i.e. a heartbeat
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Execute a data getter and store results in cache
	ExecuteDataGetter(ctx context.Context, in *DataGetterExecutionTask, opts ...grpc.CallOption) (*DataGetterResult, error)
}

type orcaProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrcaProcessorClient(cc grpc.ClientConnInterface) OrcaProcessorClient {
	return &orcaProcessorClient{cc}
}

func (c *orcaProcessorClient) ExecuteDagPart(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecutionResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OrcaProcessor_ServiceDesc.Streams[0], OrcaProcessor_ExecuteDagPart_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecutionRequest, ExecutionResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrcaProcessor_ExecuteDagPartClient = grpc.ServerStreamingClient[ExecutionResult]

func (c *orcaProcessorClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, OrcaProcessor_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orcaProcessorClient) ExecuteDataGetter(ctx context.Context, in *DataGetterExecutionTask, opts ...grpc.CallOption) (*DataGetterResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataGetterResult)
	err := c.cc.Invoke(ctx, OrcaProcessor_ExecuteDataGetter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrcaProcessorServer is the server API for OrcaProcessor service.
// All implementations must embed UnimplementedOrcaProcessorServer
// for forward compatibility.
//
// OrcaProcessor defines the interface that each processing node must implement.
// Processors are language-agnostic services that:
// - Execute individual algorithms
// - Handle their own internal state
// - Report results back to the orchestrator
// Orca will schedule processors asynchronously as per the DAG
type OrcaProcessorServer interface {
	// Execute part of a DAG with streaming results
	// Server streams back execution results as they become available
	ExecuteDagPart(*ExecutionRequest, grpc.ServerStreamingServer[ExecutionResult]) error
	// Check health/status of processor. i.e. a heartbeat
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Execute a data getter and store results in cache
	ExecuteDataGetter(context.Context, *DataGetterExecutionTask) (*DataGetterResult, error)
	mustEmbedUnimplementedOrcaProcessorServer()
}

// UnimplementedOrcaProcessorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrcaProcessorServer struct{}

func (UnimplementedOrcaProcessorServer) ExecuteDagPart(*ExecutionRequest, grpc.ServerStreamingServer[ExecutionResult]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteDagPart not implemented")
}
func (UnimplementedOrcaProcessorServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedOrcaProcessorServer) ExecuteDataGetter(context.Context, *DataGetterExecutionTask) (*DataGetterResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDataGetter not implemented")
}
func (UnimplementedOrcaProcessorServer) mustEmbedUnimplementedOrcaProcessorServer() {}
func (UnimplementedOrcaProcessorServer) testEmbeddedByValue()                       {}

// UnsafeOrcaProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrcaProcessorServer will
// result in compilation errors.
type UnsafeOrcaProcessorServer interface {
	mustEmbedUnimplementedOrcaProcessorServer()
}

func RegisterOrcaProcessorServer(s grpc.ServiceRegistrar, srv OrcaProcessorServer) {
	// If the following call pancis, it indicates UnimplementedOrcaProcessorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrcaProcessor_ServiceDesc, srv)
}

func _OrcaProcessor_ExecuteDagPart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecutionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrcaProcessorServer).ExecuteDagPart(m, &grpc.GenericServerStream[ExecutionRequest, ExecutionResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrcaProcessor_ExecuteDagPartServer = grpc.ServerStreamingServer[ExecutionResult]

func _OrcaProcessor_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaProcessorServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrcaProcessor_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaProcessorServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrcaProcessor_ExecuteDataGetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataGetterExecutionTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrcaProcessorServer).ExecuteDataGetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrcaProcessor_ExecuteDataGetter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrcaProcessorServer).ExecuteDataGetter(ctx, req.(*DataGetterExecutionTask))
	}
	return interceptor(ctx, in, info, handler)
}

// OrcaProcessor_ServiceDesc is the grpc.ServiceDesc for OrcaProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrcaProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrcaProcessor",
	HandlerType: (*OrcaProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _OrcaProcessor_HealthCheck_Handler,
		},
		{
			MethodName: "ExecuteDataGetter",
			Handler:    _OrcaProcessor_ExecuteDataGetter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteDagPart",
			Handler:       _OrcaProcessor_ExecuteDagPart_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
